{"version":3,"sources":["types/Status.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Status","actions","todo","type","payload","currentTodoReducer","state","action","value","filterState","query","status","all","filterReducer","filter","todos","todosReducer","rootReducer","combineReducers","currentTodo","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppSelector","useDispatch","useSelector","TodoList","dispatch","selectedTodo","visibleTodos","preparedTodos","trim","title","toLowerCase","includes","active","completed","getVisibleTodos","length","className","map","id","classNames","onClick","TodoFilter","onChange","event","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","user","setUser","useEffect","userId","TodoActions","href","email","name","App","areLoadingTodos","setAreLoadingTodos","response","TodosActions","finally","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ffc62330.chunk.js","sourcesContent":["export enum Status {\n  all = 'all',\n  active = 'active',\n  completed = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetStatus = { type: 'status/SET', payload: Status };\ntype SetQuery = { type: 'query/SET', payload: string };\ntype ClearQuery = { type: 'query/CLEAR' };\n\ntype Action = SetStatus | SetQuery | ClearQuery;\n\nconst setStatus = (value: Status): Action => ({\n  type: 'status/SET',\n  payload: value,\n});\n\nconst setQuery = (value: string): Action => ({\n  type: 'query/SET',\n  payload: value,\n});\n\nconst clearQuery = (): Action => ({\n  type: 'query/CLEAR',\n});\n\nexport const actions = { setStatus, setQuery, clearQuery };\n\ntype Filter = {\n  query: string,\n  status: Status,\n};\n\nconst filterState: Filter = {\n  query: '',\n  status: Status.all,\n};\n\nconst filterReducer = (filter = filterState, action: Action) => {\n  switch (action.type) {\n    case 'query/SET':\n      return { ...filter, query: action.payload };\n    case 'query/CLEAR':\n      return { ...filter, query: '' };\n    case 'status/SET':\n      return { ...filter, status: action.payload };\n    default:\n      return filter;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'todos/SET',\n  payload: Todo[],\n};\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\nconst todosReducer = (todos: Todo[] = [], action: SetTodosAction): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return [...action.payload];\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { useDispatch } from 'react-redux';\nimport classNames from 'classnames';\nimport { actions } from '../../features/currentTodo';\nimport { Status } from '../../types/Status';\nimport { useAppSelector } from '../../app/hooks';\n\nexport const TodoList = () => {\n  const dispatch = useDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const { query, status } = useAppSelector(state => state.filter);\n\n  const getVisibleTodos = () => {\n    let preparedTodos = [...todos];\n\n    if (query.trim()) {\n      preparedTodos = preparedTodos.filter(\n        todo => todo.title.toLowerCase().includes(query.toLowerCase()),\n      );\n    }\n\n    switch (status) {\n      case Status.active:\n        return preparedTodos.filter(todo => !todo.completed);\n      case Status.completed:\n        return preparedTodos.filter(todo => todo.completed);\n      default:\n        return preparedTodos;\n    }\n  };\n\n  const visibleTodos = getVisibleTodos();\n\n  return (\n    <>\n      {visibleTodos.length === 0 ? (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      ) : (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {visibleTodos.map(todo => (\n              <tr data-cy=\"todo\" className=\"\" key={todo.id}>\n                <td className=\"is-vcentered\">{todo.id}</td>\n                {todo.completed ? (\n                  <td className=\"is-vcentered\">\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  </td>\n                ) : (\n                  <td className=\"is-vcentered\" />\n                )}\n                <td className=\"is-vcentered is-expanded\">\n                  <p className={classNames(\n                    todo.completed ? 'has-text-success' : 'has-text-danger',\n                  )}\n                  >\n                    {todo.title}\n                  </p>\n                </td>\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => dispatch(actions.setTodo(todo))}\n                  >\n                    <span className=\"icon\">\n                      <i className={todo === selectedTodo\n                        ? 'far fa-eye-slash'\n                        : 'far fa-eye'}\n                      />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </>\n\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { Status } from '../../types/Status';\nimport { actions } from '../../features/filter';\n\nexport const TodoFilter = () => {\n  const dispatch = useDispatch();\n  const { query, status } = useAppSelector(state => state.filter);\n\n  const handleSelect = (event: React.ChangeEvent<HTMLSelectElement>) => (\n    dispatch(actions.setStatus(event.target.value as Status))\n  );\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => (\n    dispatch(actions.setQuery(event.target.value))\n  );\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={handleSelect}\n          >\n            <option value={Status.all}>All</option>\n            <option value={Status.active}>Active</option>\n            <option value={Status.completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleQueryChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query && (\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              aria-label=\"label\"\n              onClick={() => dispatch(actions.clearQuery())}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { useAppSelector } from '../../app/hooks';\nimport { actions as TodoActions } from '../../features/currentTodo';\n\nexport const TodoModal = () => {\n  const [user, setUser] = useState<User | null>(null);\n\n  const dispatch = useDispatch();\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    if (selectedTodo) {\n      getUser(selectedTodo.userId)\n        .then(setUser);\n    }\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo?.id}`}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              aria-label=\"label\"\n              onClick={() => dispatch(TodoActions.removeTodo())}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo?.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { useDispatch } from 'react-redux';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { useAppSelector } from './app/hooks';\nimport { actions as TodosActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const [areLoadingTodos, setAreLoadingTodos] = useState(false);\n\n  const dispatch = useDispatch();\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    setAreLoadingTodos(true);\n    getTodos()\n      .then((response) => dispatch(TodosActions.setTodos(response)))\n      .finally(() => setAreLoadingTodos(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {areLoadingTodos ? (\n                <Loader />\n              ) : (\n                <TodoList />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}